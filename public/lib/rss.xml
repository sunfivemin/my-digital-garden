<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[blog]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.ico</url><title>blog</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 20 Feb 2025 07:52:13 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 20 Feb 2025 07:52:13 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[index]]></title><description><![CDATA[ 
 <br>!!!]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Thu, 20 Feb 2025 07:51:59 GMT</pubDate></item><item><title><![CDATA[서버와 유저가 통신하는 법 / RESTful API]]></title><description><![CDATA[ 
 <br><br>서버는 단순한 프로그램으로, 요청을 받아 처리하는 역할을 한다.<br>
예를 들어,  <br>
<br>사용자가 웹툰을 요청하면 웹툰 데이터를 전송  
<br>DB 데이터를 요청하면 해당 데이터를 반환  
<br>반대로 데이터를 저장해달라고 하면 저장  
<br>즉, 서버는 사용자의 요청을 정확한 방식으로 전달받아야 원하는 데이터를 반환할 수 있다.<br>
마음대로 요청하면 서버는 데이터를 주지 않는다.<br><br><br>서버에게 데이터를 요청하려면 두 가지 요소를 정확히 입력해야 한다.  <br>
<br>Method (어떤 작업을 수행할지)  
<br>URL (어떤 데이터를 요청할지)  
<br><br>
<br>GET → 데이터를 요청할 때  
<br>POST → 데이터를 서버에 전송할 때  
<br>PUT / UPDATE → 기존 데이터를 수정할 때  
<br>DELETE → 데이터를 삭제할 때  
<br>
📌 URL도 정확하게 작성해야 한다. 이를 엔드포인트(Endpoint) 라고 부른다.<br>
정확한 method와 URL을 사용해야 서버가 요청을 정상적으로 처리한다.
<br><br><br>REST(Representational State Transfer)는 좋은 API를 설계하는 원칙을 정의한 개념이다.<br>
RESTful API는 이 원칙을 따르는 API를 의미하며, 다음과 같은 특징을 가진다.<br><br>
<br>
Uniform Interface (일관성 있는 인터페이스)  

<br>하나의 URL은 하나의 데이터만 다뤄야 한다.  
<br>URL과 Method는 일관성 있고 예측 가능해야 한다.  


<br>
Client-Server 역할 분리  

<br>클라이언트(사용자)와 서버의 역할을 명확히 구분해야 한다.  
<br>서버의 DB를 직접 조작하지 않도록 설계해야 한다.  


<br>
Stateless (무상태성)  

<br>각 요청은 독립적이어야 하며, 이전 요청의 정보를 유지하지 않아야 한다.  
<br>즉, 서버는 클라이언트의 상태를 저장하지 않는다.  


<br>
Cacheable (캐싱 가능성)  

<br>서버의 응답 데이터는 캐싱이 가능해야 한다.  
<br>자주 요청되는 데이터는 브라우저나 CDN에서 캐싱할 수 있도록 설정해야 한다.  


<br>
Layered System (계층 구조)  

<br>API 서버는 보안, 로드밸런싱 등을 위해 여러 개의 계층을 가질 수 있다.  


<br>
Code on demand (선택적 실행 코드 지원)  

<br>필요할 경우 서버는 클라이언트에게 실행 가능한 코드를 제공할 수도 있다.  


<br>
🎯 REST 원칙을 완벽하게 따르는 서버는 거의 없으며, 권장사항으로 참고하는 개념이다.<br>
대부분은 Method와 URL을 명확하게 구성하는 것만으로도 RESTful API라고 부른다.
<br><br><br>RESTful API를 만들 때 URL을 보기 쉽게 설계하는 것이 중요하다.<br>✔ URL은 동사가 아니라 명사로 구성<br>
✔ 언더바 _ 대신 대시 - 사용<br>
✔ 파일 확장자 (.html 등) 제거<br>
✔ 하위 경로는 / 기호로 구분<br><br>
<br>✅ facebook.com/bbc/photos<br>
→ BBC 뉴스 계정의 사진첩  
<br>✅ instagram.com/explore/tags/food<br>
→ #food 태그가 포함된 게시물  
<br>위처럼 URL만 봐도 어떤 데이터가 반환될지 이해할 수 있도록 설계하는 것이 RESTful API의 핵심이다.<br><br>📌 정리하면...<br>
<br>서버에 요청하려면 Method + URL이 정확해야 한다.  
<br>REST는 API 설계의 권장 원칙이며, 완벽하게 지키지 않아도 된다.  
<br>URL은 직관적이고 명확하게 설계하는 것이 중요하다.
<br>🚀 RESTful API를 적용할 때 위 원칙들을 참고하자!  <br><br><img alt="RESTful API 개념" src="restfulapi.png">]]></description><link>restful-api.html</link><guid isPermaLink="false">RESTful API.md</guid><pubDate>Thu, 20 Feb 2025 07:22:35 GMT</pubDate><enclosure url="restfulapi.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="restfulapi.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>